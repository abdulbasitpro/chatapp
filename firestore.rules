/**
 * @fileoverview Firestore Security Rules for a real-time chat application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user data and room creation,
 * and allows public read access to rooms and their messages. Only the creator of a room
 * can modify or delete it. Messages can be created by any authenticated user within
 * a room, but only the sender can delete their own messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user data, accessible only by the user.
 * - /rooms/{roomId}: Stores chat room metadata, readable by anyone, but only modifiable
 *   by the creator.
 * - /rooms/{roomId}/messages/{messageId}: Stores individual messages within a room, readable
 *   by anyone, but only deletable by the message sender.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Rooms are publicly readable to facilitate discovery and participation.
 * - The 'creatorId' field is denormalized into the Room document for efficient
 *   authorization checks, avoiding costly 'get()' calls.
 *
 * Denormalization for Authorization:
 * - The 'creatorId' field is stored directly within the Room document. This allows rules
 *   to quickly verify ownership without needing additional reads.
 *
 * Structural Segregation:
 * - Private user data is stored under the /users/{userId} path, separate from public
 *   room and message data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} True if the authenticated user's UID matches the provided userId, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} True if the authenticated user's UID matches the provided userId and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for user documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Only the authenticated user can access their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - Creating a profile with a mismatched user ID.
     * @principle Enforces document ownership for user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for room documents.
     * @path /rooms/{roomId}
     * @allow (get, list) - Any user can read room information.
     * @allow (create) - Any authenticated user can create a room, with creatorId matching their UID.
     * @allow (update, delete) - Only the creator of the room can update or delete it.
     * @deny (create) - Creating a room with a mismatched creatorId.
     * @principle Enforces creator ownership for room management.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.creatorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;
    }

    /**
     * @description Defines rules for message documents within a room.
     * @path /rooms/{roomId}/messages/{messageId}
     * @allow (get, list) - Any user can read messages within a room.
     * @allow (create) - Any authenticated user can create a message within a room, with senderId matching their UID.
     * @allow (delete) - Only the sender of the message can delete it.
     * @deny (create) - Creating a message with a mismatched senderId.
     * @principle Enforces sender ownership for message deletion.
     */
    match /rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
      allow update: if false;
      allow delete: if isSignedIn() && resource.data.senderId == request.auth.uid;
    }
  }
}