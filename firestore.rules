/**
 * @fileoverview Firestore Security Rules for a real-time chat application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and creator-ownership for chat rooms.
 * Users can only read and write their own profile data. Chat rooms can only be deleted by their creator.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /rooms/{roomId}: Stores chat room metadata, including the creator.
 * - /rooms/{roomId}/messages/{messageId}: Stores individual messages within a chat room.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Chat rooms can only be deleted by their creator.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Room` entity includes a `creatorId` field to simplify ownership checks during deletion.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (userId matches auth.uid).
     * @allow (get, update, delete) - If the user is the owner of the profile (userId matches auth.uid).
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Validate that the userId is available
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to chat rooms.
     * @path /rooms/{roomId}
     * @allow (get, list) - Public read access to room metadata.
     * @allow (create) - Anyone can create a chat room. The 'creatorId' field in the data must match the authenticated user's ID.
     * @allow (delete) - Only the user who created the room can delete it.
     * @deny (update) - No updates allowed (for prototyping, this simplifies security).
     * @principle Enforces creator ownership for chat rooms. Public read, owner-only delete.
     */
    match /rooms/{roomId} {
      function isRoomCreator(creatorId) {
        return request.auth != null && request.auth.uid == creatorId;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.creatorId == request.auth.uid;
      allow update: if false; // No updates allowed for simplicity in the prototype.

      allow delete: if isRoomCreator(resource.data.creatorId) && resource != null;
     }

    /**
     * @description Controls access to messages within a chat room.
     * @path /rooms/{roomId}/messages/{messageId}
     * @allow (get, list) - Public read access to all messages in a room.
     * @allow (create) - Any authenticated user can send a message to a room.
     * @deny (update, delete) - No updates or deletes allowed (for prototyping, this simplifies security).
     * @principle Public read, authenticated write for messages within a room.
     */
    match /rooms/{roomId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}