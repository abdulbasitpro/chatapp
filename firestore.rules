/**
 * @fileoverview Firestore Security Rules for a chat application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model with creator-based ownership for Rooms
 * and sender-based ownership for Messages.  It prioritizes secure data access based on
 * authenticated user identity. Data shape is not strictly validated for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /rooms/{roomId}: Stores chat room metadata, with access control based on the room creator.
 * - /rooms/{roomId}/messages/{messageId}: Stores messages within a specific chat room; messages are only modifiable by the sender.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Only the creator of a room can delete the room.
 * - Only the sender of a message can delete the message.
 * - Listing of users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The `Room` entity includes a `creatorId` field, enabling rules to directly verify room ownership without additional reads.
 * - The `Message` entity includes a `senderId` field, enabling rules to directly verify message ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Manages user profile data.  Users can only read/write their own profile.
     * @path: /users/{userId}
     * @allow: User with UID 'user123' can create a profile with id 'user123'. (create)
     * @deny: User with UID 'user456' cannot create a profile with id 'user123'. (create)
     * @principle: Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return exists(/databases/$(database)/documents/users/$(userId)) && isOwner(userId);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Manages chat room metadata.  Only the creator can delete a room.
     * @path: /rooms/{roomId}
     * @allow: User with UID 'user123' can create a room with creatorId 'user123'. (create)
     * @deny: User with UID 'user456' cannot create a room with creatorId 'user123'. (create)
     * @principle: Enforces creator-ownership for room management.
     */
    match /rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isCreator(roomId) {
        return get(/databases/$(database)/documents/rooms/$(roomId)).data.creatorId == request.auth.uid;
      }

      function isExistingRoomCreator(roomId) {
        return exists(/databases/$(database)/documents/rooms/$(roomId)) && isCreator(roomId);
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if false;
      allow delete: if isSignedIn() && isExistingRoomCreator(roomId);
    }

    /**
     * @description: Manages messages within a chat room. Only the sender can delete a message.
     * @path: /rooms/{roomId}/messages/{messageId}
     * @allow: User with UID 'user123' can create a message with senderId 'user123'. (create)
     * @deny: User with UID 'user456' cannot create a message with senderId 'user123'. (create)
     * @principle: Enforces sender-ownership for message management.
     */
    match /rooms/{roomId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSender(roomId, messageId) {
        return get(/databases/$(database)/documents/rooms/$(roomId)/messages/$(messageId)).data.senderId == request.auth.uid;
      }

      function isExistingMessageSender(roomId, messageId) {
        return exists(/databases/$(database)/documents/rooms/$(roomId)/messages/$(messageId)) && isSender(roomId, messageId);
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
      allow update: if false;
      allow delete: if isSignedIn() && isExistingMessageSender(roomId, messageId);
    }
  }
}