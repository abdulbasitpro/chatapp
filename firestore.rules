/**
 * @fileoverview Firestore Security Rules for the chat application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user data and a creator-ownership model for chat rooms.
 * Messages inherit the security context of their parent rooms.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the owning user.
 * - /rooms/{roomId}: Stores chat room metadata, with access controlled by the room creator.
 * - /rooms/{roomId}/messages/{messageId}: Stores messages within a specific chat room; access is implicitly controlled by access to the parent room.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data under /users/{userId}.
 * - Only the creator can modify or delete a chat room. Anyone can read a room.
 * - Listing users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Rooms store the creatorId directly to avoid needing get() calls to a separate users collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User nCpsSnaR4gQBKhzojcFzKmZm4i63 can create their own profile.
     * @allow (get, update, delete) User nCpsSnaR4gQBKhzojcFzKmZm4i63 can read, update, and delete their own profile.
     * @deny (create) User nCpsSnaR4gQBKhzojcFzKmZm4i63 cannot create a profile with a different ID.
     * @deny (get, update, delete) User otherUser cannot read, update, or delete user nCpsSnaR4gQBKhzojcFzKmZm4i63's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat rooms.
     * @path /rooms/{roomId}
     * @allow (create) Any signed-in user can create a new chat room.
     * @allow (get, list) Any user can read or list existing chat rooms.
     * @allow (update, delete) Only the creator of the room can update or delete it.
     * @deny (update, delete) Other users cannot modify or delete chat rooms they don't own.
     * @principle Enforces creator ownership for writes, allows public reads.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isRoomOwner(resource.data.creatorId) && resource != null;
      allow delete: if isRoomOwner(resource.data.creatorId) && resource != null;
    }

    /**
     * @description Controls access to messages within a chat room.
     * @path /rooms/{roomId}/messages/{messageId}
     * @allow (create) Any signed-in user can create a message in a chat room.
     * @allow (get, list) Any user can read or list messages in a chat room.
     * @allow (update, delete) No one is allowed to edit or delete messages.
     * @deny (update, delete) No one can update or delete messages.
     * @principle Messages inherit the security context of their parent rooms.
     */
    match /rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

        /**
     * @description Controls access to the "status" collection (the error indicates a missing rule here)
     * @path /status
     * @allow (get, list) Any user can read status.
     * @deny (create, update, delete) No one can create, update, or delete status.
     * @principle Public read-only access to status information.
     */
    match /status {
      allow get, list: if true;
      allow create, update, delete: if false;
    }


    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isRoomOwner(creatorId) {
        return request.auth.uid == creatorId;
    }
  }
}