rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the user to manage their own data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with the matching userId.
     * @deny (get, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures chat rooms, allowing anyone to read, but only the creator to update or delete.
     * @path /rooms/{roomId}
     * @allow (get, list) if true (public read).
     * @allow (create) if the request includes a valid creatorId matching the user's ID.
     * @allow (update, delete) if the request is made by the room creator.
     * @deny (create, update, delete) if the request is made by a non-creator.
     * @principle Enforces creator-based ownership for writes, allows public reads.
     */
    match /rooms/{roomId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid != null && request.resource.data.creatorId == request.auth.uid;
      allow update: if request.auth.uid != null && resource.data.creatorId == request.auth.uid;
      allow delete: if request.auth.uid != null && resource.data.creatorId == request.auth.uid;
    }

    /**
     * @description Secures messages within a chat room, allowing anyone to read, but only the sender to create.
     * @path /rooms/{roomId}/messages/{messageId}
     * @allow (get, list) if true (public read).
     * @allow (create) if the request includes a valid senderId matching the user's ID.
     * @allow (update, delete) if false (no updates or deletes allowed).
     * @deny (create) if the request is made by a different user.
     * @principle Enforces sender-based creation for messages, allows public reads, no updates or deletes.
     */
    match /rooms/{roomId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid != null && request.resource.data.senderId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures typing statuses within a chat room, allowing only the user to delete their own status.
     * @path /rooms/{roomId}/typing_statuses/{userId}
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if isOwner(userId) && resource != null;
     * @principle Enforces user-based deletion of their typing status.
     */
    match /rooms/{roomId}/typing_statuses/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if request.auth.uid != null && request.auth.uid == userId;
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}