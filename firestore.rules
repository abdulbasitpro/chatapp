/**
 * @file Overview
 * This ruleset enforces a user-ownership model for user data and a creator-ownership model for chat rooms and messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /rooms/{roomId}: Stores chat room metadata. Access is restricted to the creator of the room.
 * - /rooms/{roomId}/messages/{messageId}: Stores individual messages within a chat room. Access is restricted to the creator of the room, or the sender of the message.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data under `/users/{userId}`.
 * - Only the creator of a room can update or delete it.
 * - Only the sender of a message and the creator of the room can delete a message.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `Room` entity includes a `creatorId` field to simplify ownership checks. This avoids the need for additional reads to determine the room's creator.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the user can access their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'nCpsSnaR4gQBKhzojcFzKmZm4i63' can create their own profile if request.auth.uid == userId
     * @allow (get, update, delete) - User 'nCpsSnaR4gQBKhzojcFzKmZm4i63' can get, update, or delete their profile if request.auth.uid == userId
     * @deny (create, get, update, delete) - User 'differentUserId' cannot create, get, update, or delete the profile of user 'nCpsSnaR4gQBKhzojcFzKmZm4i63'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages chat room metadata, ensuring only the creator can modify the room.
     * @path /rooms/{roomId}
     * @allow (create) - User 'creatorId' can create a room with creatorId == request.auth.uid
     * @allow (get, list) - Any user can read the room's metadata
     * @allow (update, delete) - Only the room creator 'creatorId' can update or delete the room.
     * @deny (update, delete) - User 'differentUserId' cannot update or delete the room created by 'creatorId'.
     * @principle Enforces creator ownership for updates and deletes. Allows public read access.
     */
    match /rooms/{roomId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isRoomCreator(roomId) && resource.data.creatorId == request.auth.uid;
      allow delete: if isRoomCreator(roomId) && resource.data.creatorId == request.auth.uid;
    }

    /**
     * @description Manages messages within a chat room, restricting deletion to the message sender or the room creator.
     * @path /rooms/{roomId}/messages/{messageId}
     * @allow (create) - Any signed-in user can create a message in a room.
     * @allow (get, list) - Any user can read messages in a room
     * @allow (delete) - Only the message sender or the room creator can delete the message.
     * @deny (delete) - User 'anotherUser' who is not the sender or room creator cannot delete message 'messageId' in room 'roomId'
     * @principle Allows message creation by any user, but restricts deletion to the sender or the room creator.
     */
    match /rooms/{roomId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid && request.resource.data.roomId == roomId;
      allow update: if false;
      allow delete: if isMessageSenderOrRoomCreator(messageId, roomId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document based on the provided userId.
     * @param {string} userId The user ID to compare with the authenticated user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID to compare with the authenticated user's ID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is the creator of the room.
     * @param {string} roomId The ID of the room to check.
     * @return {bool} True if the user is the creator, false otherwise.
     */
    function isRoomCreator(roomId) {
      return isSignedIn() && get(/databases/$(database)/documents/rooms/$(roomId)).data.creatorId == request.auth.uid;
    }

   /**
    * @description Checks if the authenticated user is the sender of the message or the creator of the room.
    * @param {string} messageId The ID of the message to check.
    * @param {string} roomId The ID of the room the message belongs to.
    * @return {bool} True if the user is the sender or the room creator, false otherwise.
    */
    function isMessageSenderOrRoomCreator(messageId, roomId) {
        let message = get(/databases/$(database)/documents/rooms/$(roomId)/messages/$(messageId)).data;
        return isSignedIn() && (message.senderId == request.auth.uid || isRoomCreator(roomId));
    }
  }
}