/**
 * @fileoverview Firestore Security Rules for a real-time chat application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user data and room creation,
 * while allowing public read access to rooms. Messages within rooms are restricted to
 * authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the owning user.
 * - /rooms/{roomId}: Stores chat room metadata, with 'creatorId' denormalized for efficient
 *   ownership checks.
 * - /rooms/{roomId}/messages/{messageId}: Stores messages within each chat room.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Room creation is restricted to authenticated users, with the 'creatorId' field
 *   validated against the user's UID.
 * - Only the room creator can delete a room.
 * - Message creation is restricted to authenticated users within a specific room.
 * - Listing of users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The 'Room' document includes a 'creatorId' field, which duplicates the user ID
 *   of the room creator. This denormalization is crucial for security rule efficiency.
 *   It enables direct authorization checks on 'Room' documents without needing to
 *   perform additional 'get()' operations to fetch user data.
 *
 * Structural Segregation:
 * - Public and private data are stored in separate collections. User profiles are stored
 *   in the private '/users/{userId}' collection, while chat room metadata is stored in
 *   the public '/rooms/{roomId}' collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create, get, update, delete) - Any other user attempts to access this profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access control for chat rooms.
     * @path /rooms/{roomId}
     * @allow (create) - Authenticated user creates a new room and their UID is equal to creatorId.
     * @allow (get, list) - Anyone can view the list of chat rooms (public read).
     * @allow (update) - No one can update the rooms.
     * @allow (delete) - Only the room creator can delete the room.
     * @deny (create) - User tries to create a room with a creatorId that doesn't match their UID.
     * @principle Public read, owner-only writes with creatorId validation.
     */
    match /rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(creatorId) {
          return request.auth.uid == creatorId;
      }

      function isExistingOwner(creatorId) {
        return isOwner(creatorId) && resource != null;
      }

      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow get, list: if true;
      allow update: if false;
      allow delete: if isExistingOwner(resource.data.creatorId);
    }

    /**
     * @description Manages access control for messages within a chat room.
     * @path /rooms/{roomId}/messages/{messageId}
     * @allow (create) - Authenticated user creates a message in a room.
     * @allow (get, list) - Any authenticated user can read messages in a room.
     * @allow (update, delete) - No one can update or delete messages (immutable).
     * @deny (create) - Anonymous user tries to create a message.
     * @principle Authenticated users can read and create messages within rooms; messages are immutable.
     */
    match /rooms/{roomId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if false;
    }
  }
}