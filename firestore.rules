/**
 * @fileoverview Firestore Security Rules for Chat Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict ownership model for user data and chat rooms. Users can only
 * read and write their own user documents. Chat rooms are owned by their creators, who have
 * exclusive rights to modify or delete them. Messages inherit the access control of their parent room.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user data, accessible only to the user themselves.
 * - /rooms/{roomId}: Stores chat room metadata, accessible for reading by anyone, but only the creator
 *   can modify or delete it. Each room document has a `creatorId` field to identify the owner.
 * - /rooms/{roomId}/messages/{messageId}: Stores individual chat messages within a room. The same
 *   access controls as the parent room are enforced on messages (creatorId check on the room).
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - `creatorId` is denormalized onto each `Room` document for efficient authorization checks, avoiding costly `get()` calls.
 * - Only the room creator can delete a room, enforcing clear ownership.
 *
 * Denormalization for Authorization:
 * The `creatorId` field is stored directly in the `Room` document to avoid needing to perform additional reads
 * to determine the room's owner. This allows for simpler and more performant security rules.
 *
 * Structural Segregation:
 * Private user data is stored under `/users/{userId}`, ensuring that only the user can access it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own document if the userId matches their auth UID.
     * @allow (get, list) - A user can read their own document.
     * @deny (update, delete) - A user cannot update or delete their own document (currently disabled).
     * @deny (create) - A user cannot create a document with a userId that doesn't match their auth UID.
     * @principle Enforces document ownership, restricting access to the owner only.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Controls access to chat room documents.
     * @path /rooms/{roomId}
     * @allow (get, list) - Anyone can read the list of chat rooms or a specific chat room.
     * @allow (create) - Only authenticated users can create a chat room, and creatorId must match their auth UID.
     * @allow (update, delete) - Only the creator of the chat room can update or delete it.
     * @deny (create) - Prevents creating a room with incorrect creatorId.
     * @principle Enforces creator ownership of chat rooms.
     */
    match /rooms/{roomId} {
      function isRoomCreator(creatorId) {
        return request.auth != null && request.auth.uid == creatorId;
      }
      function isExistingRoomCreator(creatorId) {
          return isRoomCreator(creatorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.creatorId == request.auth.uid && request.resource.data.id == roomId;
      allow update: if isExistingRoomCreator(resource.data.creatorId) && request.resource.data.creatorId == resource.data.creatorId;
      allow delete: if isExistingRoomCreator(resource.data.creatorId);
    }

    /**
     * @description Controls access to messages within a chat room.
     * @path /rooms/{roomId}/messages/{messageId}
     * @allow (get, list) - Anyone can read messages in a chat room.
     * @allow (create) - Only authenticated users can create messages in a chat room. SenderId must match their auth UID and roomId must match parent room.
     * @allow (update, delete) - No updates or deletes allowed.
     * @deny (create) - Prevents creating messages with incorrect senderId or roomId.
     * @principle Inherits access control from the parent room, with additional checks for message sender.
     */
    match /rooms/{roomId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid && request.resource.data.roomId == roomId;
      allow update: if false;
      allow delete: if false;
    }
  }
}