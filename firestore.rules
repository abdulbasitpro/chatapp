/**
 * @fileoverview Firestore Security Rules for Chat Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict ownership model for user data and room creation,
 * while allowing public read access to chat rooms and messages. Authorization
 * decisions are made independently at each level, avoiding the need for chained
 * `get()` calls.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profiles, accessible only to the owning user.
 * - /rooms/{roomId}: Stores chat room metadata, with access control based on room creator.
 * - /rooms/{roomId}/messages/{messageId}: Stores messages within a chat room; all authenticated users can read and write messages in any room.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Room creation is restricted to authenticated users.
 * - Message creation is restricted to authenticated users.
 * - Listing all users is disallowed for privacy.
 * - Public read access is granted for chat rooms and messages.
 *
 * Denormalization for Authorization:
 * - The `Room` entity includes a `creatorId` field, which is used to authorize updates and deletes. This avoids the need for security rules to perform additional reads to determine room ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the owning user can read and write their data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner (userId matches request.auth.uid).
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages chat rooms, restricting creation to authenticated users and updates/deletes to the room creator.
     * @path /rooms/{roomId}
     * @allow (get, list) any authenticated user can read chat room data.
     * @allow (create) any authenticated user can create a chat room, if creatorId is set to their user id.
     * @allow (update, delete) only the room creator can modify or delete the room.
     * @deny (create) if the creatorId does not match the authenticated user's ID.
     * @principle Enforces creator-based ownership for chat rooms.
     */
    match /rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isRoomCreator(creatorId) {
        return request.auth != null && request.auth.uid == creatorId;
      }
      function isExistingRoomCreator(creatorId) {
        return isRoomCreator(creatorId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingRoomCreator(resource.data.creatorId);
      allow delete: if isExistingRoomCreator(resource.data.creatorId);
    }

    /**
     * @description Manages messages within a chat room; any authenticated user can read and create messages.
     * @path /rooms/{roomId}/messages/{messageId}
     * @allow (get, list) any authenticated user can read messages.
     * @allow (create) any authenticated user can create a message within any room.
     * @deny (update, delete) no one can update or delete messages.
     * @principle Allows public read access to messages while restricting modification.
     */
    match /rooms/{roomId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}