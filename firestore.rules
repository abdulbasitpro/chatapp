/**
 * @fileoverview Firestore Security Rules for a real-time chat application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and room creation,
 * while allowing read access to chat rooms and messages.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores private user data, accessible only to the owning user.
 * - `/rooms/{roomId}`: Stores chat room metadata, with access controlled by the room creator.
 * - `/rooms/{roomId}/messages/{messageId}`: Stores messages within a chat room, accessible for reading by anyone.
 *
 * Key Security Decisions:
 * - Users can only create their own user documents and read/write their own data.
 * - Chat rooms can only be created by authenticated users, who become the owner.
 * - Anyone can read messages in a chat room. Only the message sender has ability to update or delete a specific message.
 * - Listing of users is disallowed to prevent data leakage.
 *
 * Denormalization for Authorization:
 * - The `Room` entity denormalizes the `creatorId` to simplify ownership checks and avoid costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - User tries to create a profile with a different userId.
     * @deny (get, update, delete) - User tries to access another user's profile.
     * @principle Enforces document ownership for all read/write operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallowing user listing for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages chat rooms, restricting creation and modification to authenticated users.
     * @path /rooms/{roomId}
     * @allow (create) - Authenticated user creates a new room with themself as the creator.
     * @allow (get, list) - Allows any user to read room metadata.
     * @allow (update, delete) - Only the room creator can modify or delete the room.
     * @deny (create) - Unauthenticated user tries to create a room.
     * @deny (update, delete) - Non-creator tries to modify or delete the room.
     * @principle Enforces creator-ownership for write operations on chat rooms.
     */
    match /rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isRoomCreator(creatorId) {
        return isSignedIn() && request.auth.uid == creatorId;
      }

      function isExistingRoomCreator(creatorId) {
        return isRoomCreator(creatorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingRoomCreator(resource.data.creatorId);
      allow delete: if isExistingRoomCreator(resource.data.creatorId);
    }

    /**
     * @description Manages messages within chat rooms, allowing anyone to read, but restricting creation to authenticated users.
     * @path /rooms/{roomId}/messages/{messageId}
     * @allow (get, list) - Allows any user to read messages.
     * @allow (create) - Authenticated user creates a message in a room.
     * @deny (create) - Unauthenticated user tries to create a message.
     * @principle Allows public read access to messages, but enforces authentication for creation.
     */
    match /rooms/{roomId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if request.auth.uid == resource.data.senderId;
      allow delete: if request.auth.uid == resource.data.senderId;
    }
  }
}